  # dimenstions
    num_colls1 = len(problems[0]['Input'][0])
    #num_colls2 = num_colls1 / 2
    num_colls2 = 1024

    #num_colls2 = min([num_colls1, num_colls3]) + abs(num_colls1 - num_colls3) / 2

    # layers
    sp1 = SpatialPooler(inputDimensions=(num_colls1, ),
                        columnDimensions=(num_colls2, ),
                        numActiveColumnsPerInhArea=-1,
                        localAreaDensity=0.05)
    '''
    sp2 = SpatialPooler(inputDimensions=(num_colls2, ),
                        columnDimensions=(num_colls3, ),
                        numActiveColumnsPerInhArea=-1,
                        localAreaDensity=0.05)
    '''
    #print(num_colls1, num_colls2, num_colls3)

    #minThr = int(numColls1 ** 0.33 / 2) + 3
    #actThr = int(numColls1 ** 0.33 / 2) + 3

    print(minThr, actThr) # 10 10
    bckTM = BTM(numberOfCols=num_colls2, cellsPerColumn=15,
                initialPerm=0.5, connectedPerm=0.5,
                minThreshold=minThr, newSynapseCount=10,
                activationThreshold=actThr,
                pamLength=10)

    layers = [(sp1, sp_compute),
              (bckTM, bk_tm_compute)]

    #layers = [(bckTM, bk_tm_compute)]

    #train_first_row(layers, problems)
    train(layers, problems)
    test(layers, problems)

=====================================================

(10, 10)
[ 0.99999994  0.97500001  0.95744678  0.99999998  1.00000003  0.98617254
  0.97999998  0.96798034  0.99999997  0.9615385   0.97560979  1.00000002
  1.00000001  0.99999998  0.96774202  0.98305096  0.97560972  0.90909094
  0.93617018  1.          0.98181825  1.          0.99999994  0.99999997
  0.89473685  0.99999997  0.97560972  0.88571429]
(28, 28)
97.5474667037

real	5m37.295s
user	5m30.960s
sys	0m0.404s

