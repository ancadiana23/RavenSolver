rows = int(length ** 0.5)
        M = length / 2

        # input placeholder
        self.X = tf.placeholder(tf.float32, [length])
        self.Y = tf.placeholder(tf.float32, [length])

        # weights and biases for the layers
        W_conv_1 = tf.Variable(tf.truncated_normal([K, K, 1, L], stddev=0.1))
        B_conv_1 = tf.Variable(tf.ones([L])/10)

        W_conv_2 = tf.Variable(tf.truncated_normal([K, K, L, L], stddev=0.1))
        B_conv_2 = tf.Variable(tf.ones([L])/10)

        W_conv_3 = tf.Variable(tf.truncated_normal([K, K, L, L], stddev=0.1))
        B_conv_3 = tf.Variable(tf.ones([L])/10)

        W_conv_4 = tf.Variable(tf.truncated_normal([K, K, 1, L], stddev=0.1))
        B_conv_4 = tf.Variable(tf.ones([1])/10)

        W_fc_1 = tf.Variable(tf.truncated_normal([length * L, M], stddev=0.1))
        B_fc_1 = tf.Variable(tf.ones([M])/10)

        W_fc_2 = tf.Variable(tf.truncated_normal([M, length * L], stddev=0.1))
        B_fc_2 = tf.Variable(tf.ones([length * L])/10)


        stride = 1
        self.X_ = tf.reshape(self.X, (1, rows, rows, 1))
        self.H1 = tf.nn.relu(tf.nn.conv2d(self.X_, W_conv_1, strides=[1, stride, stride, 1], padding='SAME') + B_conv_1)
        self.H2 = tf.nn.relu(tf.nn.conv2d(self.H1, W_conv_2, strides=[1, stride, stride, 1], padding='SAME') + B_conv_2)

        self.H3 = tf.nn.sigmoid(tf.matmul(tf.reshape(self.H2, (1, length * L)), W_fc_1) + B_fc_1)
        self.H4 = tf.reshape(tf.nn.sigmoid(tf.matmul(self.H3, W_fc_2) + B_fc_2), (1, rows, rows, L))

        self.H5 = tf.nn.relu(tf.nn.conv2d_transpose(self.H2, W_conv_3, (1, rows, rows, L) ,strides=[1, stride, stride, 1], padding='SAME') + B_conv_3)
        self.H6 = tf.nn.relu(tf.nn.conv2d_transpose(self.H2, W_conv_4, (1, rows, rows, 1) ,strides=[1, stride, stride, 1], padding='SAME') + B_conv_4)

        self.Y_ = tf.reshape(self.H6, [rows * rows])

-------------------------------------------------

 for problem in problems:
            init = tf.global_variables_initializer()
            self.sess.run(init)
            errs = []

            for epoch in range(max_epochs):
                learning_rate = max_learning_rate + (min_learning_rate - max_learning_rate) * (epoch + 1)/max_epochs
                _, cost  = self.sess.run([self.train_step, self.err],
                                          feed_dict={self.X: problem['Input'][0],
                                                     self.Y: problem['Input'][1],
                                                     self.lr : learning_rate})
                errs += [cost]
            #print(errs)
            plt.clf()
            plt.plot(range(len(errs)), errs, color='blue')
            plt.savefig(folder + '/' + problem['Attributes']['title'] + '.png')

            output = self.sess.run([self.Y_], feed_dict={self.X: problem['Input'][2]})

            print(problem['Output'].shape, output[0].shape, np.sum(output))

            matches = problem['Output'] * output
            matches = np.sum(matches, axis=1) / np.sum(problem['Output'], axis=1)
            print(matches)
            print(problem['Attributes']['result'])

            #print(problems[i]['Attributes']['title'], matches)
            vote = np.argmax(matches)
            res_idx = problem['Attributes']['result'] - 1

            # if the precition was correct add it to the correct_predictions list
            if vote == res_idx and np.max(matches) > 0.0:
                correct_predictions[i] = np.max(matches)
                num_correct_predictions += 1
            i += 1
            print('\n')



====================================================

[ 0.14550421  0.          0.          0.          0.          0.07348818
  0.          0.          0.06420356  0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.06366719
  0.          0.        ]
(4, 28)
1.23879690396

real	40m13.009s
user	54m9.808s
sys	3m2.592s


====================================================

No reset


[ 0.1171357   0.          0.          0.07386847  0.          0.07411223
  0.          0.          0.12501849  0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.          0.
  0.          0.          0.          0.          0.          0.          0.
  0.        ]
(4, 28)
1.3933389015
/home/anca/.local/lib/python2.7/site-packages/matplotlib-2.0.0-py2.7-linux-x86_64.egg/matplotlib/backends/backend_gtk3.py:215: Warning: Source ID 8 was not found when attempting to remove it
  GLib.source_remove(self._idle_draw_id)

real	11m12.673s
user	11m54.440s
sys	0m57.084s


